;; Generated by boxworld generator
;; http://www.cs.rutgers.edu/~jasmuth/boxworld.tar.gz
;; by John Asmuth (jasmuth@cs.rutgers.edu)

(define (domain boxworld-design-relaxed)
 (:requirements :typing :equality :disjunctive-preconditions
                :probabilistic-effects :existential-preconditions
                :conditional-effects :negative-preconditions
                :universal-preconditions :rewards)
 (:types city box truck plane time)
 (:predicates (box-at-city ?b - box ?c - city)
              (truck-at-city ?t - truck ?c - city)
              (box-on-truck ?b - box ?t - truck)
              (plane-at-city ?p - plane ?c - city)
              (box-on-plane ?b - box ?p - plane)
              (destination ?b - box ?dst - city)
              (can-drive ?src - city ?dst - city)
              (wrong-drive1 ?src - city ?wrongdst - city)
              (wrong-drive2 ?src - city ?wrongdst - city)
              (can-fly ?src - city ?dst - city)

	      (enabled-safety-drive ?t - truck ?src - city ?dst - city)
	      (safety-drive ?t - truck)

	      (enabled-move-truck-to-city ?t - truck ?dst - city)
	      (move-truck-to-city ?t - truck)

	      (execution)
	      (current-time ?t1 - time)
	      (next ?t1 - time ?t2 - time)	


)


(:action move-truck-enabled
    :parameters (?t - truck ?src - city ?dst - city)
    :precondition (and (truck-at-city ?t ?src) (enabled-move-truck-to-city ?t ?dst)(execution))
    :effect (and (truck-at-city ?t ?dst) )
)

(:action drive-truck-safe-enabled
  :parameters (?t - truck ?src - city ?dst - city)
  :precondition (and (truck-at-city ?t ?src)(enabled-safety-drive ?t ?src ?dst) (execution))
  :effect (and 
               (probabilistic
                0.1 (forall (?wrongdst1 - city)
                    (when (wrong-drive1 ?src ?wrongdst1)
                    (forall (?wrongdst2 - city)
                    (when (wrong-drive2 ?src ?wrongdst2)
                     (probabilistic
                      0.5 (truck-at-city ?t ?wrongdst1)
                      0.5 (truck-at-city ?t ?wrongdst2)                      
                     )
                    ))))
                0.9 (truck-at-city ?t ?dst)
               )
          )
          
 )


 (:action load-box-on-truck-in-city
  :parameters (?b - box ?t - truck ?c - city)
  :precondition (and (execution))
  :effect (when (and (box-at-city ?b ?c)
                               (not (destination ?b ?c))
                               (truck-at-city ?t ?c)
                          )
(and (box-on-truck ?b ?t)
               (not (box-at-city ?b ?c))
                )
          )
 )
 (:action unload-box-from-truck-in-city
  :parameters (?b - box ?t - truck ?c - city)
  :precondition (and (execution))
  :effect (when (and (box-on-truck ?b ?t)
                               (truck-at-city ?t ?c)
                          )
                (and (box-at-city ?b ?c)
               (not (box-on-truck ?b ?t))
                )
          )
 )
 (:action load-box-on-plane-in-city
  :parameters (?b - box ?p - plane ?c - city)
  :precondition (and (execution))
  :effect (when (and (box-at-city ?b ?c)
                     (not (destination ?b ?c))
                     (plane-at-city ?p ?c)
                )
                (and (box-on-plane ?b ?p)
               (not (box-at-city ?b ?c))
                )
          )
 )
 (:action unload-box-from-plane-in-city
  :parameters (?b - box ?p - plane ?c - city)
  :precondition (and (execution))
  :effect (when (and (box-on-plane ?b ?p)
                     (plane-at-city ?p ?c)
                )
                (and (box-at-city ?b ?c)
               (not (box-on-plane ?b ?p))
                )
          )
 )
 (:action drive-truck
  :parameters (?t - truck ?src - city ?dst - city)
  :precondition (and (execution))
  :effect (when (and (truck-at-city ?t ?src)
                     (can-drive ?src ?dst)
                )
          (and 
               (probabilistic
                0.2 (forall (?wrongdst1 - city)
                    (when (wrong-drive1 ?src ?wrongdst1)
                    (forall (?wrongdst2 - city)
                    (when (wrong-drive2 ?src ?wrongdst2)
                     (probabilistic
                      0.5 (truck-at-city ?t ?wrongdst1)
                      0.5 (truck-at-city ?t ?wrongdst2)                      
                     )
                    ))))
                0.8 (truck-at-city ?t ?dst)
               )
          )
          )
 )


 
 (:action fly-plane
  :parameters (?p - plane ?src - city ?dst - city)
  :precondition (and (execution))
  :effect (when (and (plane-at-city ?p ?src)
                     (can-fly ?src ?dst)
                )
(and (not (plane-at-city ?p ?src))
               (plane-at-city ?p ?dst)
          )
 )
 )


;Design actions

 (:action design-idle
    :parameters ( ?t - time ?tnext - time )
    :precondition (and (not (execution)) (current-time ?t ) (next ?t ?tnext))
    :effect (and (current-time ?tnext ) (not (current-time ?t)))
  )


 (:action design-start-execution
    :parameters ()
    :precondition (and (not(execution)))
    :effect (and (execution))
  )


 (:action design-reduce-uncertainty-drive
    :parameters (?t - truck ?src - city ?dst - city ?t1 - time ?tnext - time)
    :precondition (and (not(execution))(next ?t1 ?tnext)(current-time ?t1 ))
    :effect (and (enabled-safety-drive ?t ?src ?dst)(safety-drive ?t)(current-time ?tnext )(not (current-time ?t1 )))
  )

  (:action design-truck-location
    :parameters (?t - truck ?src - city ?dst - city ?t1 - time ?tnext - time)
    :precondition (and (not(execution))(next ?t1 ?tnext)(current-time ?t1 )(truck-at-city ?t ?src))
    :effect (and (current-time ?tnext )(not (current-time ?t1 ))(enabled-move-truck-to-city ?t ?dst)(move-truck-to-city ?t))
  )



)

